{"version":3,"sources":["components/TransactionHistory/TransactionHistory.module.css","components/Controls/Controls.module.css","components/Controls/Controls.js","components/Balance/Balance.js","components/TransactionHistory/TransactionHistory.js","components/Dashboard/Dashboard.js","components/App.js","serviceWorker.js","index.js","components/Balance/Balance.module.css"],"names":["module","exports","Controls","changeAmount","number","buttonDeposit","buttonWithdraw","className","s","controls","buttons","input","type","name","value","onChange","button","onClick","Balance","balance","deposit","withdraw","span","TransactionHistory","items","styles","transactionHist","names","information","map","item","key","id","transactions","amount","date","Dashboard","state","handleChange","e","setState","target","addDepositTransaction","Date","now","newDepositTransaction","shortid","generate","Number","toLocaleString","toast","configure","prevState","addWithdrawTransaction","newWithdrawTransaction","i","localStorage","getItem","b","d","w","JSON","parse","this","setItem","stringify","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.653a5e4e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHist\":\"TransactionHistory_transactionHist__9Iepr\",\"names\":\"TransactionHistory_names__1wE8g\",\"transactions\":\"TransactionHistory_transactions__j283Q\",\"information\":\"TransactionHistory_information__vHaj-\",\"value\":\"TransactionHistory_value__3KBMi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__12Pbi\",\"buttons\":\"Controls_buttons__sEiO7\",\"input\":\"Controls_input__2zEYV\",\"button\":\"Controls_button__5kZHg\"};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Controls.module.css';\n\nconst Controls = ({ changeAmount, number, buttonDeposit, buttonWithdraw }) => (\n  <section className={s.controls}>\n    <div className={s.buttons}>\n      <input\n        className={s.input}\n        type=\"number\"\n        name=\"number\"\n        value={number}\n        onChange={changeAmount}\n      />\n      <button className={s.button} onClick={buttonDeposit} type=\"button\">\n        Deposit\n      </button>\n      <button className={s.button} onClick={buttonWithdraw} type=\"button\">\n        Withdraw\n      </button>\n    </div>\n  </section>\n);\n\nControls.propTypes = {\n  number: PropTypes.string.isRequired,\n  buttonDeposit: PropTypes.func.isRequired,\n  buttonWithdraw: PropTypes.func.isRequired,\n  changeAmount: PropTypes.func.isRequired,\n};\n\nexport default Controls;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport s from './Balance.module.css';\n\nconst Balance = ({ balance, deposit, withdraw }) => (\n  <section className={s.balance}>\n    <span className={s.span}>&#8593; {deposit} $</span>\n    <span className={s.span}>&#8595; {withdraw} $</span>\n    <span className={s.span}>Balance: {balance} $</span>\n  </section>\n);\n\nBalance.propTypes = {\n  balance: PropTypes.number.isRequired,\n  deposit: PropTypes.number.isRequired,\n  withdraw: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ items }) => (\n  <table className={styles.transactionHist}>\n    <thead>\n      <tr className={styles.names}>\n        <th className={styles.information}>Transaction</th>\n        <th className={styles.information}>Amount</th>\n        <th className={styles.information}>Date</th>\n      </tr>\n    </thead>\n    <tbody>\n      {items.map(item => (\n        <tr key={item.id} className={styles.transactions}>\n          <td className={styles.value}>{item.type}</td>\n          <td className={styles.value}>{item.amount}$</td>\n          <td className={styles.value}>{item.date}</td>\n        </tr>\n      ))}\n    </tbody>\n  </table>\n);\n\nTransactionHistory.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport shortid from 'shortid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\n\nexport default class Dashboard extends Component {\n  state = {\n    transactions: [],\n    number: ' ',\n    balance: 0,\n    deposit: 0,\n    withdraw: 0,\n  };\n\n  componentDidMount() {\n    const i = localStorage.getItem('transactions');\n    const b = localStorage.getItem('balance');\n    const d = localStorage.getItem('deposit');\n    const w = localStorage.getItem('withdraw');\n    if (i) {\n      const transactions = JSON.parse(i);\n      this.setState({ transactions });\n    }\n    if (b) {\n      const balance = JSON.parse(b);\n      this.setState({ balance });\n    }\n    if (d) {\n      const deposit = JSON.parse(d);\n      this.setState({ deposit });\n    }\n    if (w) {\n      const withdraw = JSON.parse(w);\n      this.setState({ withdraw });\n    }\n  }\n\n  componentDidUpdate(prevState) {\n    const { transactions, balance, deposit, withdraw } = this.state;\n    if (prevState.state !== this.state) {\n      localStorage.setItem('transactions', JSON.stringify(transactions));\n      localStorage.setItem('balance', balance);\n      localStorage.setItem('deposit', deposit);\n      localStorage.setItem('withdraw', withdraw);\n    }\n  }\n\n  handleChange = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  addDepositTransaction = () => {\n    const { number } = this.state;\n    const date = new Date(Date.now());\n    const newDepositTransaction = {\n      id: shortid.generate(),\n      amount: Number(number),\n      type: 'Deposit',\n      date: date.toLocaleString('en-GB'),\n    };\n    if (Number(number) === 0) {\n      toast.configure();\n      const notify = () => toast('Введите сумму для проведения операции!');\n      notify();\n    } else {\n      this.setState(prevState => ({\n        transactions: [...prevState.transactions, newDepositTransaction],\n        balance: prevState.balance + Number(number),\n        deposit: Number(number),\n      }));\n    }\n  };\n\n  addWithdrawTransaction = () => {\n    const { number, balance } = this.state;\n    const date = new Date(Date.now());\n    const newWithdrawTransaction = {\n      id: shortid.generate(),\n      amount: Number(number),\n      type: 'Withdrawal',\n      date: date.toLocaleString('en-GB'),\n    };\n    if (Number(number) > balance) {\n      toast.configure();\n      const notify = () =>\n        toast('На счету недостаточно средств для проведения операции!');\n      notify();\n    } else if (Number(number) === 0) {\n      toast.configure();\n      const notify = () => toast('Введите сумму для проведения операции!');\n      notify();\n    } else {\n      this.setState(prevState => ({\n        transactions: [...prevState.transactions, newWithdrawTransaction],\n        balance: prevState.balance - Number(number),\n        withdraw: Number(number),\n      }));\n    }\n  };\n\n  render() {\n    const { balance, transactions, number, deposit, withdraw } = this.state;\n    return (\n      <div className=\"dashboard\">\n        <Controls\n          number={number}\n          changeAmount={this.handleChange}\n          buttonDeposit={this.addDepositTransaction}\n          buttonWithdraw={this.addWithdrawTransaction}\n        />\n        <Balance balance={balance} deposit={deposit} withdraw={withdraw} />\n        <TransactionHistory items={transactions} />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Dashboard from './Dashboard/Dashboard';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__3DDb-\",\"span\":\"Balance_span__2u7QD\"};"],"sourceRoot":""}